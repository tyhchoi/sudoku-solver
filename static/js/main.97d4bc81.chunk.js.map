{"version":3,"sources":["components/Square.js","components/Grid.js","components/Solver.js","components/Sudoku.js","serviceWorker.js","index.js"],"names":["Square","_this$props","this","props","cName","value","react_default","a","createElement","className","React","Component","Grid","rows","grid","map","arr","i","key","val","j","LENGTH","components_Square","checkRowCol","row","col","checkSquare","cols","Solver","randomGrid","random","Math","floor","data","file","push","solve","gridStates","empty","getEmpty","saved","length","set","_empty$i","Object","slicedToArray","toString","JSON","parse","stringify","parseInt","Sudoku","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","unshift","state","interval","count","timer","isLooping","_this2","initialInterval","setInterval","setState","clearInterval","loop","prevState","e","target","_this3","components_Grid","disabled","onClick","prevGridState","toggleLoop","nextGridState","resetGrid","newRandomGrid","type","min","max","step","defaultValue","onChange","handleIntervalChange","bind","Boolean","window","location","hostname","match","ReactDOM","render","components_Sudoku","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97d4bc81.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Square extends React.Component {\n  static propTypes = {\n    value: PropTypes.string,\n    cName: PropTypes.string\n  }\n\n  render() {\n    const {cName, value} = this.props;\n    return (\n      <td className={cName}>\n        {value}\n      </td>\n    );\n  }\n}\n\nexport default Square;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Square from './Square';\n\nconst LENGTH = 9;\n\nclass Grid extends React.Component {\n  static propTypes = {\n    grid: PropTypes.array\n  }\n\n  render() {\n    const { grid } = this.props;\n\n    const rows = grid.map((arr, i) => {\n      return (\n        <tr key={'row-' + i}>\n          {arr.map((val, j) => {\n            let cName = 'square';\n\n            if (i % 3 === 0) {\n              cName += ' top';\n            } else if (i === LENGTH - 1) {\n              cName += ' bottom';\n            }\n\n            if (j % 3 === 0) {\n              cName += ' left';\n            } else if (j === LENGTH - 1) {\n              cName += ' right';\n            }\n\n            return (<Square key={i+'-'+j} value={val} cName={cName} />);\n          })}\n        </tr>\n      )\n    });\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Grid;\n","import file from '../files/sudoku.json'\n\nconst LENGTH = 9;\nconst NUMVALS = 65500;\n\nconst randomGrid = () => {\n  const random = Math.floor(Math.random() * NUMVALS);\n  const data = file.data[random];\n  const grid = [];\n\n  for (let i = 0; i < LENGTH; i++) {\n    const row = [];\n    for (let j = 0; j < LENGTH; j++) {\n      const val = data[j + LENGTH * i];\n      if (val === '0') {\n        row.push('');\n      } else {\n        row.push(val);\n      }\n    }\n    grid.push(row);\n  }\n\n  return grid;\n}\n\nconst checkRowCol = (grid, row, col, val) => {\n  for (let i = 0; i < LENGTH; i++) {\n    if (i !== row) {\n      if (grid[i][col] === val) {\n        return false;\n      }\n    }\n\n    if (i !== col) {\n      if (grid[row][i] === val) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nconst checkSquare = (grid, row, col, val) => {\n  let rows = [0, 3];\n  let cols = [0, 3];\n  while (row >= rows[1]) {\n    rows[0] += 3;\n    rows[1] += 3;\n  }\n\n  while (col >= cols[1]) {\n    cols[0] += 3;\n    cols[1] += 3;\n  }\n\n  for (let i = rows[0]; i < rows[1]; i++) {\n    for (let j = cols[0]; j < cols[1]; j++) {\n      if (i !== row && j !== col) {\n        if (grid[i][j] === val) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nconst getEmpty = grid => {\n  const empty = [];\n  for (let i = 0; i < LENGTH; i++) {\n    for (let j = 0; j < LENGTH; j++) {\n      if (grid[i][j] === '') {\n        empty.push([i, j]);\n      }\n    }\n  }\n  return empty;\n}\n\nconst solve = grid => {\n  const gridStates = [];\n  const empty = getEmpty(grid);\n\n  const saved = [];\n  for (let i = 0; i < empty.length; i++) {\n    saved.push(1);\n  }\n\n  let i = 0;\n  while (i < empty.length && i > -1) {\n    let set = false;\n    const [row, col] = empty[i];\n    let prev = saved[i];\n\n    for (let j = prev; j < LENGTH + 1; j++) {\n      const val = j.toString();\n      grid[row][col] = val;\n      gridStates.push(JSON.parse(JSON.stringify(grid)));\n\n      if (checkSquare(grid, row, col, val) && checkRowCol(grid, row, col, val)) {\n        set = true;\n        saved[i] = parseInt(val) + 1;\n        i++;\n        break;\n      }\n    }\n\n    if (!set) {\n      saved[i] = 1;\n      grid[row][col] = '';\n      gridStates.push(JSON.parse(JSON.stringify(grid)));\n      i--;\n    }\n  }\n\n  return gridStates;\n}\n\nexport default { randomGrid, solve };\n","import React from 'react';\nimport Grid from './Grid';\nimport Solver from './Solver';\n\nclass Sudoku extends React.Component {\n  constructor() {\n    super();\n    const grid = Solver.randomGrid();\n    const gridStates = Solver.solve(JSON.parse(JSON.stringify(grid)));\n    gridStates.unshift(JSON.parse(JSON.stringify(grid)));\n\n    this.state = {\n      grid,\n      gridStates,\n      interval: 10,\n      count: 0,\n      timer: null,\n      isLooping: false\n    };\n  }\n\n  loop() {\n    const initialInterval = this.state.interval;\n    let { count } = this.state;\n\n    const timer = setInterval(() => {\n      count++;\n      this.setState({grid: this.state.gridStates[count]});\n\n      if (initialInterval !== this.state.interval) {\n        this.setState({count});\n        clearInterval(timer);\n        this.loop();\n      }\n\n      if (!this.state.isLooping) {\n        this.setState({count});\n        clearInterval(timer);\n      }\n\n      if (count === this.state.gridStates.length - 1) {\n        this.setState(prevState => ({\n          count: count,\n          isLooping: !prevState.isLooping\n        }));\n        clearInterval(timer);\n      }\n    }, this.state.interval);\n\n    this.setState({timer});\n  }\n\n  newRandomGrid() {\n    clearInterval(this.state.timer);\n\n    const grid = Solver.randomGrid();\n    const gridStates = Solver.solve(JSON.parse(JSON.stringify(grid)));\n    gridStates.unshift(JSON.parse(JSON.stringify(grid)));\n\n    this.setState({\n      grid,\n      gridStates,\n      count: 0,\n      timer: null,\n      isLooping: false\n    });\n  }\n\n  toggleLoop() {\n    this.setState(prevState => ({\n      isLooping: !prevState.isLooping\n    }));\n\n    if (!this.state.isLooping) {\n      this.loop();\n    }\n  }\n\n  prevGridState() {\n    this.setState(prevState => ({\n      count: prevState.count - 1,\n      grid: prevState.gridStates[prevState.count - 1]\n    }));\n  }\n\n  nextGridState() {\n    this.setState(prevState => ({\n      count: prevState.count + 1,\n      grid: prevState.gridStates[prevState.count + 1]\n    }));\n  }\n\n  resetGrid() {\n    clearInterval(this.state.timer);\n\n    if (this.state.isLooping) {\n      this.setState(prevState => ({\n        isLooping: !prevState.isLooping\n      }));\n    }\n\n    this.setState({grid: this.state.gridStates[0], count: 0});\n  }\n\n  handleIntervalChange(e) {\n    this.setState({interval: e.target.value});\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className='title'>DFS Visualizer using Sudoku</h1>\n        <div className='sudoku'>\n          <div className='grid'>\n            <Grid grid={this.state.grid} />\n          </div>\n          <div className='controls'>\n            <button\n              disabled={this.state.isLooping || this.state.count === 0}\n              onClick={() => this.prevGridState()}>\n              &#9664;\n            </button>\n            <button disabled={this.state.count >= this.state.gridStates.length}\n              onClick={() => this.toggleLoop()}>\n              {this.state.isLooping ? 'Stop' : 'Start'}\n            </button>\n            <button\n              disabled={this.state.isLooping || this.state.count === this.state.gridStates.length - 1}\n              onClick={() => this.nextGridState()}>\n              &#9654;\n            </button>\n            <button onClick={() => this.resetGrid()}>Reset</button>\n            <button onClick={() => this.newRandomGrid()}>Random</button>\n            Faster\n            <input type='range' min='10' max='145' step='15' defaultValue='10'\n              onChange={this.handleIntervalChange.bind(this)} />\n            Slower\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sudoku;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Sudoku from './components/Sudoku';\nimport './css/style.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Sudoku />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}