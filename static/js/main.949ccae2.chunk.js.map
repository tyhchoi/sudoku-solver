{"version":3,"sources":["components/Square.js","components/Grid.js","components/Solver.js","components/CSSThemeChanger.js","components/Sudoku.js","serviceWorker.js","index.js"],"names":["Square","_this$props","this","props","cName","value","react_default","a","createElement","className","React","Component","Grid","grid","initialFilled","rows","map","arr","i","key","val","j","LENGTH","has","concat","components_Square","checkRowCol","row","col","checkSquare","cols","Solver","randomGrid","random","Math","floor","data","file","push","getInitialFilled","filled","Set","add","solve","gridStates","empty","getInitialEmpty","saved","length","set","_empty$i","Object","slicedToArray","toString","JSON","parse","stringify","parseInt","CSSThemeChanger","updateCSS","theme","prevProps","keys","forEach","document","documentElement","style","setProperty","children","Sudoku","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","unshift","state","interval","count","timer","isLooping","themes","gray","newRandomGrid","bind","assertThisInitialized","toggleLoop","prevGridState","nextGridState","resetGrid","handleIntervalChange","handleThemeChange","_this2","_this$state","initialInterval","setInterval","setState","clearInterval","loop","prevState","_this$state2","e","target","_this$state3","components_CSSThemeChanger","components_Grid","onChange","disabled","onClick","type","min","max","step","defaultValue","Boolean","window","location","hostname","match","ReactDOM","render","components_Sudoku","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.949ccae2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Square extends React.Component {\n  static propTypes = {\n    value: PropTypes.string,\n    cName: PropTypes.string\n  }\n\n  render() {\n    const {cName, value} = this.props;\n    return (\n      <td className={cName}>\n        {value}\n      </td>\n    );\n  }\n}\n\nexport default Square;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Square from './Square';\n\nconst LENGTH = 9;\n\nclass Grid extends React.Component {\n  static propTypes = {\n    grid: PropTypes.array,\n    initialFilled: PropTypes.instanceOf(Set)\n  }\n\n  render() {\n    const {grid, initialFilled} = this.props;\n\n    const rows = grid.map((arr, i) => {\n      return (\n        <tr key={'row-' + i}>\n          {arr.map((val, j) => {\n            let cName = 'square';\n\n            if (i % 3 === 0) {\n              cName += ' top';\n            } else if (i === LENGTH - 1) {\n              cName += ' bottom';\n            }\n\n            if (j % 3 === 0) {\n              cName += ' left';\n            } else if (j === LENGTH - 1) {\n              cName += ' right';\n            }\n\n            if (initialFilled.has(`${i},${j}`)) {\n              cName += ' initial';\n            }\n\n            return (<Square key={i+'-'+j} value={val} cName={cName} />);\n          })}\n        </tr>\n      )\n    });\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Grid;\n","import file from '../files/sudoku.json'\n\nconst LENGTH = 9;\nconst NUMVALS = 65500;\nconst SQUARELEN = 3;\n\nconst randomGrid = () => {\n  const random = Math.floor(Math.random() * NUMVALS);\n  const data = file.data[random];\n  const grid = [];\n\n  for (let i = 0; i < LENGTH; i++) {\n    const row = [];\n    for (let j = 0; j < LENGTH; j++) {\n      const val = data[j + LENGTH * i];\n      if (val === '0') {\n        row.push('');\n      } else {\n        row.push(val);\n      }\n    }\n    grid.push(row);\n  }\n\n  return grid;\n}\n\nconst checkRowCol = (grid, row, col, val) => {\n  for (let i = 0; i < LENGTH; i++) {\n    if (i !== row) {\n      if (grid[i][col] === val) {\n        return false;\n      }\n    }\n\n    if (i !== col) {\n      if (grid[row][i] === val) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nconst checkSquare = (grid, row, col, val) => {\n  let rows = [0, SQUARELEN];\n  let cols = [0, SQUARELEN];\n  while (row >= rows[1]) {\n    rows[0] += SQUARELEN;\n    rows[1] += SQUARELEN;\n  }\n\n  while (col >= cols[1]) {\n    cols[0] += SQUARELEN;\n    cols[1] += SQUARELEN;\n  }\n\n  for (let i = rows[0]; i < rows[1]; i++) {\n    for (let j = cols[0]; j < cols[1]; j++) {\n      if (i !== row && j !== col) {\n        if (grid[i][j] === val) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nconst getInitialEmpty = grid => {\n  const empty = [];\n  for (let i = 0; i < LENGTH; i++) {\n    for (let j = 0; j < LENGTH; j++) {\n      if (grid[i][j] === '') {\n        empty.push([i, j]);\n      }\n    }\n  }\n  return empty;\n}\n\nconst getInitialFilled = grid => {\n  const filled = new Set();\n  for (let i = 0; i < LENGTH; i++) {\n    for (let j = 0; j < LENGTH; j++) {\n      if (grid[i][j] !== '') {\n        filled.add(`${i},${j}`);\n      }\n    }\n  }\n  return filled;\n}\n\nconst solve = grid => {\n  const gridStates = [];\n  const empty = getInitialEmpty(grid);\n\n  const saved = [];\n  for (let i = 0; i < empty.length; i++) {\n    saved.push(1);\n  }\n\n  let i = 0;\n  while (i < empty.length && i > -1) {\n    let set = false;\n    const [row, col] = empty[i];\n    let prev = saved[i];\n\n    for (let j = prev; j < LENGTH + 1; j++) {\n      const val = j.toString();\n      grid[row][col] = val;\n      gridStates.push(JSON.parse(JSON.stringify(grid)));\n\n      if (checkSquare(grid, row, col, val) && checkRowCol(grid, row, col, val)) {\n        set = true;\n        saved[i] = parseInt(val) + 1;\n        i++;\n        break;\n      }\n    }\n\n    if (!set) {\n      saved[i] = 1;\n      grid[row][col] = '';\n      gridStates.push(JSON.parse(JSON.stringify(grid)));\n      i--;\n    }\n  }\n\n  return gridStates;\n}\n\nexport default { randomGrid, getInitialFilled, solve };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass CSSThemeChanger extends React.Component {\n  static propTypes = {\n    theme: PropTypes.object\n  }\n\n  componentDidMount() {\n    this.updateCSS(this.props.theme);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.theme !== prevProps.theme) {\n      this.updateCSS(this.props.theme);\n    }\n  }\n\n  updateCSS(theme) {\n    Object.keys(theme).forEach(key => {\n      document.documentElement.style.setProperty(key, theme[key]);\n    });\n  }\n\n  render() {\n    return (<div>{this.props.children}</div>);\n  }\n}\n\nexport default CSSThemeChanger;\n","import React from 'react';\nimport Grid from './Grid';\nimport Solver from './Solver';\nimport CSSThemeChanger from './CSSThemeChanger';\nimport themes from '../files/themes';\n\nclass Sudoku extends React.Component {\n  constructor() {\n    super();\n    const grid = Solver.randomGrid();\n    const gridStates = Solver.solve(JSON.parse(JSON.stringify(grid)));\n    gridStates.unshift(JSON.parse(JSON.stringify(grid)));\n\n    this.state = {\n      grid,\n      gridStates,\n      initialFilled: Solver.getInitialFilled(grid),\n      interval: 10,\n      count: 0,\n      timer: null,\n      isLooping: false,\n      theme: themes.gray\n    };\n\n    this.newRandomGrid = this.newRandomGrid.bind(this);\n    this.toggleLoop = this.toggleLoop.bind(this);\n    this.prevGridState = this.prevGridState.bind(this);\n    this.nextGridState = this.nextGridState.bind(this);\n    this.resetGrid = this.resetGrid.bind(this);\n    this.handleIntervalChange = this.handleIntervalChange.bind(this);\n    this.handleThemeChange = this.handleThemeChange.bind(this);\n  }\n\n  loop() {\n    const {interval: initialInterval, gridStates} = this.state;\n    let { count } = this.state;\n\n    const timer = setInterval(() => {\n      count++;\n      this.setState({grid: gridStates[count]});\n\n      if (initialInterval !== this.state.interval) {\n        this.setState({count});\n        clearInterval(timer);\n        this.loop();\n      }\n\n      if (!this.state.isLooping) {\n        this.setState({count});\n        clearInterval(timer);\n      }\n\n      if (count === gridStates.length - 1) {\n        this.setState({count, isLooping: false});\n        clearInterval(timer);\n      }\n    }, initialInterval);\n\n    this.setState({timer});\n  }\n\n  newRandomGrid() {\n    clearInterval(this.state.timer);\n\n    const grid = Solver.randomGrid();\n    const gridStates = Solver.solve(JSON.parse(JSON.stringify(grid)));\n    gridStates.unshift(JSON.parse(JSON.stringify(grid)));\n\n    this.setState({\n      grid,\n      gridStates,\n      initialFilled: Solver.getInitialFilled(grid),\n      count: 0,\n      timer: null,\n      isLooping: false\n    });\n  }\n\n  toggleLoop() {\n    this.setState(prevState => ({\n      isLooping: !prevState.isLooping\n    }));\n\n    if (!this.state.isLooping) {\n      this.loop();\n    }\n  }\n\n  prevGridState() {\n    this.setState(prevState => ({\n      count: prevState.count - 1,\n      grid: prevState.gridStates[prevState.count - 1]\n    }));\n  }\n\n  nextGridState() {\n    this.setState(prevState => ({\n      count: prevState.count + 1,\n      grid: prevState.gridStates[prevState.count + 1]\n    }));\n  }\n\n  resetGrid() {\n    const {timer, gridStates} = this.state;\n\n    clearInterval(timer);\n    this.setState({grid: gridStates[0], count: 0, isLooping: false});\n  }\n\n  handleIntervalChange(e) {\n    this.setState({interval: e.target.value});\n  }\n\n  handleThemeChange(e) {\n    this.setState({theme: themes[e.target.value]})\n  }\n\n  render() {\n    const {grid, gridStates, initialFilled, count, isLooping, theme} = this.state;\n\n    return (\n      <div>\n        <CSSThemeChanger theme={theme} />\n        <h1 className='title'>DFS Visualizer using Sudoku</h1>\n        <div className='sudoku'>\n          <div className='grid'>\n            <Grid grid={grid} initialFilled={initialFilled} />\n          </div>\n          <div className='controls'>\n            <select onChange={this.handleThemeChange}>\n              <option value=\"gray\">Gray</option>\n              <option value=\"lime\">Lime</option>\n              <option value=\"blue\">Blue</option>\n              <option value=\"magenta\">Magenta</option>\n            </select>\n            <button\n              disabled={isLooping || count === 0}\n              onClick={this.prevGridState}>\n              &#9664;\n            </button>\n            <button disabled={count === gridStates.length - 1}\n              onClick={this.toggleLoop}>\n              {isLooping ? 'Stop' : 'Start'}\n            </button>\n            <button\n              disabled={isLooping || count === gridStates.length - 1}\n              onClick={this.nextGridState}>\n              &#9654;\n            </button>\n            <button onClick={this.resetGrid}>Reset</button>\n            <button onClick={this.newRandomGrid}>Random</button>\n            Faster\n            <input type='range' min='10' max='145' step='15' defaultValue='10'\n              onChange={this.handleIntervalChange} />\n            Slower\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sudoku;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Sudoku from './components/Sudoku';\nimport './css/style.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Sudoku />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}